(1)	<prog> → require "ifj21" <main-list>
(2)	<main-list> → <def-decl-fcall> <main-list>
(3)	<main-list> → ε
(4)	<stmt-list> → <stmt> <stmt-list>
(5)	<stmt-list> → ε
(6)	<stmt> → id <assign-or-fcall>
(7)	<stmt> → <decl-local>
(8)	<stmt> → <while>
(9)	<stmt> → <if>
(10)	<stmt> → <return>
(11)	<assign-or-fcall> → ( <param-list> )
(12)	<assign-or-fcall> → <id_list> = <f-or-item-list>
(13)	<f-or-item-list> → expr <item-another>
(14)	<f-or-item-list> → id <fcall-or-item-list>
(15)	<fcall-or-item-list> → ( <param_list> )
(16)	<fcall-or-item-list> → <item_another>
(17)	<id-list> → , id <id_list>
(18)	<id-list> → ε
(19)	<item> → id
(20)	<item> → expr
(21)	<return> → return <item-list>
(22)	<param-list> → ε
(23)	<param-list> → <item-list>
(24)	<item-list> → <item> <item-another>
(25)	<item-another> → , <item> <item-another>
(26)	<item-another> → ε
(27)	<def-decl-fcall> → global id : <f-or-type>
(28)	<def-decl-fcall> → function id ( <f-arg-list> ) <return-types> <stmt-list> end
(29)	<def-decl-fcall> → id ( <param-list> )
(30)	<decl-local> → local id : <type> <decl-assign>
(31)	<f-or-type> → function ( <types> ) <return_types>
(32)	<f-or-type> → <type> <decl-assign>
(33)	<decl-assign> → = <f-or-item-list>
(34)	<decl-assign> → ε
(35)	<f-arg-list> → <f-arg> f-arg-another
(36)	<f-arg-list> → ε
(37)	<f-arg-another> → , <f-arg> <f-arg-another>
(38)	<f-arg-another> → ε
(39)	<f-arg> → id : <type>
(40)	<return-types> → ε
(41)	<return-types> → : <type> <type-list>
(42)	<type-list> → , <type> <type-list>
(43)	<type-list> → ε
(44)	<types> → <type> <type-list>
(45)	<types> → ε
(46)	<if> → if <cond> then <stmt-list> else <stmt-list> end
(47)	<while> → while <cond> do <stmt-list> end
(48)	<cond> → <item> <cond-oper> <item>
(49)	<type> → integer
(50)	<type> → string
(51)	<type> → number
(52)	<cond-oper> → <
(53)	<cond-oper> → >
(54)	<cond-oper> → ==
(55)	<cond-oper> → ~=
(56)	<cond-oper> → <=
(57)	<cond-oper> → >=

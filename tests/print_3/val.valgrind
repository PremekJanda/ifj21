==904709== Memcheck, a memory error detector
==904709== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==904709== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==904709== Command: ./compiler
==904709== 
==904709== Conditional jump or move depends on uninitialised value(s)
==904709==    at 0x40A9F9: fix_expr.part.0 (code_generator.c:170)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40A9C3: fix_expr (code_generator.c:161)
==904709==    by 0x40A9C3: fix_expr.part.0 (code_generator.c:183)
==904709==    by 0x40DE06: fix_expr (code_generator.c:161)
==904709==    by 0x40DE06: generate_code (code_generator.c:53)
==904709==    by 0x40127A: main (compiler.c:45)
==904709== 
==904709== Conditional jump or move depends on uninitialised value(s)
==904709==    at 0x40DEC2: generate_code (code_generator.c:83)
==904709==    by 0x40127A: main (compiler.c:45)
==904709== 
==904709== 
==904709== HEAP SUMMARY:
==904709==     in use at exit: 277 bytes in 9 blocks
==904709==   total heap usage: 5,150 allocs, 5,141 frees, 223,243 bytes allocated
==904709== 
==904709== 2 bytes in 1 blocks are indirectly lost in loss record 1 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x404871: node_setdata (tree.c:47)
==904709==    by 0x4031DB: syntax_analyzer (parser.c:237)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== 2 bytes in 1 blocks are indirectly lost in loss record 2 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x404871: node_setdata (tree.c:47)
==904709==    by 0x402AE3: bottom_up (parser.c:130)
==904709==    by 0x4034B6: syntax_analyzer (parser.c:250)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== 5 bytes in 1 blocks are indirectly lost in loss record 3 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x40481A: node_setdata (tree.c:40)
==904709==    by 0x402AE3: bottom_up (parser.c:130)
==904709==    by 0x4034B6: syntax_analyzer (parser.c:250)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== 12 bytes in 1 blocks are indirectly lost in loss record 4 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x40481A: node_setdata (tree.c:40)
==904709==    by 0x4031DB: syntax_analyzer (parser.c:237)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== 32 bytes in 1 blocks are indirectly lost in loss record 5 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x40478F: node_init (tree.c:22)
==904709==    by 0x4031A4: syntax_analyzer (parser.c:236)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== 39 (32 direct, 7 indirect) bytes in 1 blocks are definitely lost in loss record 6 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x40478F: node_init (tree.c:22)
==904709==    by 0x402AD4: bottom_up (parser.c:129)
==904709==    by 0x4034B6: syntax_analyzer (parser.c:250)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== 80 bytes in 1 blocks are indirectly lost in loss record 7 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x40477C: node_init (tree.c:19)
==904709==    by 0x4031A4: syntax_analyzer (parser.c:236)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== 80 bytes in 1 blocks are definitely lost in loss record 8 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x40477C: node_init (tree.c:19)
==904709==    by 0x402AD4: bottom_up (parser.c:129)
==904709==    by 0x4034B6: syntax_analyzer (parser.c:250)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== 158 (32 direct, 126 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
==904709==    at 0x483A809: malloc (vg_replace_malloc.c:307)
==904709==    by 0x403199: syntax_analyzer (parser.c:235)
==904709==    by 0x40123D: main (compiler.c:27)
==904709== 
==904709== LEAK SUMMARY:
==904709==    definitely lost: 144 bytes in 3 blocks
==904709==    indirectly lost: 133 bytes in 6 blocks
==904709==      possibly lost: 0 bytes in 0 blocks
==904709==    still reachable: 0 bytes in 0 blocks
==904709==         suppressed: 0 bytes in 0 blocks
==904709== 
==904709== Use --track-origins=yes to see where uninitialised values come from
==904709== For lists of detected and suppressed errors, rerun with: -s
==904709== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)
